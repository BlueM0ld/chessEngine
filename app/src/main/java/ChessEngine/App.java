/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ChessEngine;

import java.util.Map;
import java.util.Scanner;
// import java.util.AbstractMap.SimpleImmutableEntry;

import ChessEngine.Board.ChessBoard;
import ChessEngine.Board.Setup;
import ChessEngine.Enums.Side;
import ChessEngine.Exceptions.IllegalPositionException;
import ChessEngine.Player.Move;


public class App {

    static Scanner scanner;
    static Side player = Side.WHITE;
    static Map<String, String> allMovEntry;
    public static void main(String[] args) throws IllegalPositionException {
        scanner = new Scanner(System.in);
        ChessBoard board = createBoard();

            while(true){
                board.printBoard();
                player = Move.moveTurn(player);
                String playerInput = scanner.nextLine();

                Move.readMove(playerInput, player,board);
                

            }


    }


    private static ChessBoard createBoard() throws IllegalPositionException {
        Setup setup = new Setup();
        ChessBoard board = new ChessBoard(setup.standardBoardSetup());
        return board;
    }

    //This clears the terminal ....how does it work ....?
    private static void refresh(ChessBoard board) {
        // System.out.println("\033[H\033[2J");
        // System.out.flush();

        // board.printBoard();

    }

    // private static void runMove(String playerInput, Side playerSide) {
    //     System.out.println("I love to move it move it");
    //     allMovEntry.put(playerSide.toString(), playerInput);
    //     //TODO REMEMBER ALL MOVES PLAYERS HAVE WROTE
    //     //TODO //Read the move then MUTATE THE BOARD
    // }
}
